version: '3.8'

services:
  # Application instances
  app1:
    build: .
    ports:
      - "8003:8000"
    environment:
      - INSTANCE_ID=1
      # Database URLs - specific PostgreSQL URLs for each database
      - DATABASE_URL_NPS=${DATABASE_URL_NPS:-postgresql://postgres:admin@host.docker.internal/nps_db}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-30}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT:-30}
      - DB_POOL_RECYCLE=${DB_POOL_RECYCLE:-300}
      # LiteLLM settings
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LITELLM_API_BASE=${LITELLM_API_BASE}
      - LITELLM_AUTH_HEADER=${LITELLM_AUTH_HEADER}
      - LITELLM_MODEL=${LITELLM_MODEL:-gpt-4.1-mini}
      # LLM temperature settings
      - GENERATION_TEMPERATURE=${GENERATION_TEMPERATURE:-0.0}
      - SUMMARY_TEMPERATURE=${SUMMARY_TEMPERATURE:-0.3}
      - SUGGESTION_TEMPERATURE=${SUGGESTION_TEMPERATURE:-0.5}
      # Redis settings
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - USE_REDIS_CLUSTER=${USE_REDIS_CLUSTER:-false}
      # Celery settings
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/2}
      - TASK_TIME_LIMIT=${TASK_TIME_LIMIT:-60}
      - TASK_SOFT_TIME_LIMIT=${TASK_SOFT_TIME_LIMIT:-50}
      - WORKER_PREFETCH_MULTIPLIER=${WORKER_PREFETCH_MULTIPLIER:-1}
      - WORKER_MAX_TASKS_PER_CHILD=${WORKER_MAX_TASKS_PER_CHILD:-1000}
      - WORKER_MAX_MEMORY_PER_CHILD=${WORKER_MAX_MEMORY_PER_CHILD:-200000}
      # Cache settings
      - ENABLE_LLM_CACHE=${ENABLE_LLM_CACHE:-true}
      - LLM_CACHE_TTL=${LLM_CACHE_TTL:-300}
      - QUERY_CACHE_TTL=${QUERY_CACHE_TTL:-300}
      - SCHEMA_CACHE_TTL=${SCHEMA_CACHE_TTL:-3600}
      # API settings
      - API_RATE_LIMIT=${API_RATE_LIMIT:-30}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      # Memory settings
      - SESSION_TTL=${SESSION_TTL:-86400}
      - HISTORY_LIMIT=${HISTORY_LIMIT:-10}
      - REDIS_RETRY_DELAY=${REDIS_RETRY_DELAY:-1}
      - REDIS_MAX_RETRIES=${REDIS_MAX_RETRIES:-3}
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./static:/app/static
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery workers
  celery-worker1:
    build: .
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4 -n worker1@%h
    environment:
      - CELERY_WORKER_ID=1
      # Database URLs - specific PostgreSQL URLs for each database
      - DATABASE_URL_NPS=${DATABASE_URL_NPS:-postgresql://postgres:admin@host.docker.internal/nps_db}
      # LiteLLM settings
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LITELLM_API_BASE=${LITELLM_API_BASE}
      - LITELLM_AUTH_HEADER=${LITELLM_AUTH_HEADER}
      - LITELLM_MODEL=${LITELLM_MODEL:-gpt-4.1-mini}
      # LLM temperature settings
      - GENERATION_TEMPERATURE=${GENERATION_TEMPERATURE:-0.0}
      - SUMMARY_TEMPERATURE=${SUMMARY_TEMPERATURE:-0.3}
      - SUGGESTION_TEMPERATURE=${SUGGESTION_TEMPERATURE:-0.5}
      # Redis settings
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      # Celery settings
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/2}
      - TASK_TIME_LIMIT=${TASK_TIME_LIMIT:-60}
      - TASK_SOFT_TIME_LIMIT=${TASK_SOFT_TIME_LIMIT:-50}
      # Cache settings
      - ENABLE_LLM_CACHE=${ENABLE_LLM_CACHE:-true}
      - LLM_CACHE_TTL=${LLM_CACHE_TTL:-300}
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    networks:
      - app-network
    restart: unless-stopped

  # Celery beat scheduler
  celery-beat:
    build: .
    command: celery -A app.tasks.celery_app beat --loglevel=info
    environment:
      # Database URLs - specific PostgreSQL URLs for each database
      - DATABASE_URL_NPS=${DATABASE_URL_NPS:-postgresql://postgres:admin@host.docker.internal/nps_db}
      # LiteLLM settings
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LITELLM_API_BASE=${LITELLM_API_BASE}
      - LITELLM_AUTH_HEADER=${LITELLM_AUTH_HEADER}
      - LITELLM_MODEL=${LITELLM_MODEL:-gpt-4.1-mini}
      # Redis settings
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      # Celery settings
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/2}
      # Cache settings
      - SCHEMA_CACHE_TTL=${SCHEMA_CACHE_TTL:-3600}
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app
    depends_on:
      - redis
    volumes:
      - ./app:/app/app
    networks:
      - app-network
    restart: unless-stopped

  # Flower monitoring
  flower:
    build: .
    command: celery -A app.tasks.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/2}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - FLOWER_PERSISTENT=True
      - FLOWER_DB=/data/flower.db
      - FLOWER_BROKER_API=redis://redis:6379/1
      - PYTHONPATH=/app
    volumes:
      - ./app:/app/app
      - flower_data:/data
    depends_on:
      - redis
      - celery-worker1
    networks:
      - app-network
    restart: unless-stopped

  # Redis with persistence
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - app-network
    restart: unless-stopped

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/custom.ini:/etc/grafana/grafana.ini:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      # Create empty directories to prevent warnings
      - /dev/null:/etc/grafana/provisioning/plugins/.gitkeep
      - /dev/null:/etc/grafana/provisioning/alerting/.gitkeep
    environment:
        - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
        - GF_AUTH_TOKEN_ROTATION_INTERVAL_MINUTES=60
        - GF_AUTH_LOGIN_MAXIMUM_INACTIVE_LIFETIME_DURATION=7d
        - GF_AUTH_LOGIN_MAXIMUM_LIFETIME_DURATION=30d
        - GF_SECURITY_ALLOW_EMBEDDING=true
        - GF_AUTH_DISABLE_LOGIN_FORM=false
        - GF_AUTH_DISABLE_SIGNOUT_MENU=false
        - GF_AUTH_TOKEN_ROTATION_INTERVAL_MINUTES=0  # Disable token rotation
        - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: always

  redis-exporter:
    image: oliver006/redis_exporter:latest
    command: --redis.addr=redis://redis:6379
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  flower_data:

networks:
  app-network:
    driver: bridge